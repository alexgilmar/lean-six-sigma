import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from scipy import stats
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import base64

class ControlChartAnalyzer:
    def __init__(self, dataframe):
        self.df = dataframe
        self.numeric_columns = dataframe.select_dtypes(include=[np.number]).columns.tolist()
        self.categorical_columns = dataframe.select_dtypes(include=['object']).columns.tolist()

    def calcular_limites_control_xbarra(self, variable):
        """
        Calcula l칤mites de control para gr치fico X-barra
        """
        datos = self.df[variable]
        media = datos.mean()
        desviacion = datos.std()
        
        # L칤mites de control cl치sicos (3-sigma)
        lim_superior = media + 3 * (desviacion / np.sqrt(len(datos)))
        lim_inferior = media - 3 * (desviacion / np.sqrt(len(datos)))
        
        return {
            'media': media,
            'limite_superior': lim_superior,
            'limite_inferior': lim_inferior
        }

    def generar_grafico_control_xbarra(self, variable):
        """
        Genera gr치fico de control X-barra interactivo
        """
        limites = self.calcular_limites_control_xbarra(variable)
        
        fig = go.Figure()
        
        # Puntos de datos
        fig.add_trace(go.Scatter(
            x=self.df.index, 
            y=self.df[variable],
            mode='markers+lines',
            name=f'{variable}',
            marker=dict(
                color=self.df[variable].apply(
                    lambda x: 'red' if x > limites['limite_superior'] or x < limites['limite_inferior'] else 'blue'
                )
            )
        ))
        
        # L칤nea de media
        fig.add_trace(go.Scatter(
            x=self.df.index, 
            y=[limites['media']] * len(self.df),
            mode='lines',
            name='Media',
            line=dict(color='green', dash='dash')
        ))
        
        # L칤mites de control
        fig.add_trace(go.Scatter(
            x=self.df.index, 
            y=[limites['limite_superior']] * len(self.df),
            mode='lines',
            name='L칤mite Superior',
            line=dict(color='red', dash='dot')
        ))
        
        fig.add_trace(go.Scatter(
            x=self.df.index, 
            y=[limites['limite_inferior']] * len(self.df),
            mode='lines',
            name='L칤mite Inferior',
            line=dict(color='red', dash='dot')
        ))
        
        fig.update_layout(
            title=f'Gr치fico de Control X-barra para {variable}',
            xaxis_title='Muestra',
            yaxis_title='Valor'
        )
        
        return fig, limites

    def interpretar_grafico_control(self, variable, limites):
        """
        Genera interpretaci칩n contextualizada
        """
        fuera_control = self.df[
            (self.df[variable] > limites['limite_superior']) | 
            (self.df[variable] < limites['limite_inferior'])
        ]
        
        interpretacion = [
            f"An치lisis de Control de Calidad para {variable}:",
            f"Media: {limites['media']:.2f}",
            f"L칤mite Superior de Control: {limites['limite_superior']:.2f}",
            f"L칤mite Inferior de Control: {limites['limite_inferior']:.2f}",
            f"N칰mero de muestras fuera de control: {len(fuera_control)}"
        ]
        
        if len(fuera_control) > 0:
            interpretacion.append("ALERTA: Existen muestras fuera de los l칤mites de control")
        
        return interpretacion

    def exportar_pdf(self, fig, variable, limites, interpretacion):
        """
        Exporta an치lisis a PDF
        """
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        elementos = []
        
        # Estilos
        estilos = getSampleStyleSheet()
        
        # T칤tulo
        elementos.append(Paragraph(f"An치lisis de Control de Calidad - {variable}", estilos['Title']))
        
        # Guardar gr치fico como imagen
        img_buffer = io.BytesIO()
        fig.write_image(img_buffer, format='png')
        img_buffer.seek(0)
        img_base64 = base64.b64encode(img_buffer.getvalue()).decode()
        
        # Imagen
        from reportlab.platypus import Image
        img_path = f"data:image/png;base64,{img_base64}"
        elementos.append(Image(img_path, width=500, height=300))
        
        # Interpretaci칩n
        elementos.append(Paragraph("Interpretaci칩n", estilos['Heading2']))
        for linea in interpretacion:
            elementos.append(Paragraph(linea, estilos['Normal']))
        
        # Tabla de L칤mites
        datos_tabla = [
            ['M칠trica', 'Valor'],
            ['Media', f"{limites['media']:.2f}"],
            ['L칤mite Superior', f"{limites['limite_superior']:.2f}"],
            ['L칤mite Inferior', f"{limites['limite_inferior']:.2f}"]
        ]
        tabla = Table(datos_tabla)
        tabla.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.grey),
            ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
            ('ALIGN', (0,0), (-1,-1), 'CENTER'),
            ('GRID', (0,0), (-1,-1), 1, colors.black)
        ]))
        elementos.append(tabla)
        
        doc.build(elementos)
        return buffer.getvalue()

def lss_tool3_control_chart_page():
    st.title("游댌 Gr치ficos de Control de Calidad")
    
    # Verificar datos cargados
    if 'uploaded_data' not in st.session_state:
        st.warning("Por favor, cargue un conjunto de datos primero.")
        return
    
    df = st.session_state['uploaded_data']
    
    # Instanciar analizador
    analizador = ControlChartAnalyzer(df)
    
    # Selecci칩n de variables
    variable = st.selectbox(
        "Seleccione Variable para An치lisis de Control",
        options=analizador.numeric_columns
    )
    
    # Generar gr치fico
    fig, limites = analizador.generar_grafico_control_xbarra(variable)
    
    # Mostrar gr치fico
    st.plotly_chart(fig)
    
    # Interpretaci칩n
    interpretacion = analizador.interpretar_grafico_control(variable, limites)
    st.info("\n".join(interpretacion))
    
    # Bot칩n de exportaci칩n
    if st.button("Exportar An치lisis a PDF"):
        pdf_data = analizador.exportar_pdf(fig, variable, limites, interpretacion)
        st.download_button(
            label="Descargar Informe PDF",
            data=pdf_data,
            file_name=f"control_calidad_{variable}.pdf",
            mime="application/pdf"
        )

def load_lss_tool3_control_chart():
    lss_tool3_control_chart_page()
